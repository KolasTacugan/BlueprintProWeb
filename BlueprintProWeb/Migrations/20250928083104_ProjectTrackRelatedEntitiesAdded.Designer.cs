// <auto-generated />
using System;
using BlueprintProWeb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlueprintProWeb.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250928083104_ProjectTrackRelatedEntitiesAdded")]
    partial class ProjectTrackRelatedEntitiesAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BlueprintProWeb.Models.Blueprint", b =>
                {
                    b.Property<int>("blueprintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("blueprintId"));

                    b.Property<string>("architectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("blueprintCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("blueprintDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("blueprintImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("blueprintIsForSale")
                        .HasColumnType("bit");

                    b.Property<string>("blueprintName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("blueprintPrice")
                        .HasColumnType("int");

                    b.Property<string>("blueprintStyle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("blueprintId");

                    b.ToTable("Blueprints");
                });

            modelBuilder.Entity("BlueprintProWeb.Models.Compliance", b =>
                {
                    b.Property<int>("compliance_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("compliance_Id"));

                    b.Property<string>("compliance_Electrical")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("compliance_Others")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("compliance_Sanitary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("compliance_Structural")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("compliance_Zoning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("projectTrack_Id")
                        .HasColumnType("int");

                    b.HasKey("compliance_Id");

                    b.HasIndex("projectTrack_Id")
                        .IsUnique();

                    b.ToTable("Compliances");
                });

            modelBuilder.Entity("BlueprintProWeb.Models.Match", b =>
                {
                    b.Property<string>("MatchId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ArchitectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MatchStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MatchId");

                    b.HasIndex("ArchitectId");

                    b.HasIndex("ClientId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("BlueprintProWeb.Models.Message", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArchitectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AttachmentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("MessageBody")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("MessageDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MessageId");

                    b.HasIndex("ArchitectId");

                    b.HasIndex("ClientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("BlueprintProWeb.Models.Notification", b =>
                {
                    b.Property<int>("notification_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("notification_Id"));

                    b.Property<DateTime>("notification_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("notification_Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("notification_Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("notification_isRead")
                        .HasColumnType("bit");

                    b.Property<string>("user_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("notification_Id");

                    b.HasIndex("user_Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("BlueprintProWeb.Models.Project", b =>
                {
                    b.Property<string>("project_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("blueprint_Id")
                        .HasColumnType("int");

                    b.Property<string>("project_Budget")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("project_Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("project_Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("project_endDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("project_startDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("user_architectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("user_clientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("project_Id");

                    b.HasIndex("blueprint_Id");

                    b.HasIndex("user_architectId");

                    b.HasIndex("user_clientId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("BlueprintProWeb.Models.ProjectFile", b =>
                {
                    b.Property<int>("projectFile_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("projectFile_Id"));

                    b.Property<int?>("ProjectTrackerprojectTrack_Id")
                        .HasColumnType("int");

                    b.Property<string>("projectFile_Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("projectFile_Version")
                        .HasColumnType("int");

                    b.Property<string>("projectFile_fileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("projectFile_uploadedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("project_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("projectFile_Id");

                    b.HasIndex("ProjectTrackerprojectTrack_Id");

                    b.HasIndex("project_Id");

                    b.ToTable("ProjectFiles");
                });

            modelBuilder.Entity("BlueprintProWeb.Models.ProjectTracker", b =>
                {
                    b.Property<int>("projectTrack_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("projectTrack_Id"));

                    b.Property<string>("blueprint_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("projectTrack_Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("projectTrack_dueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("project_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("project_Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("projectTrack_Id");

                    b.HasIndex("project_Id")
                        .IsUnique();

                    b.ToTable("ProjectTrackers");
                });

            modelBuilder.Entity("BlueprintProWeb.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PortfolioEmbedding")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortfolioText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("user_Budget")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_CredentialsFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("user_Rating")
                        .HasColumnType("float");

                    b.Property<string>("user_Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_Style")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("user_createdDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("user_fname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_licenseNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_lname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_profilePhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BlueprintProWeb.Models.Compliance", b =>
                {
                    b.HasOne("BlueprintProWeb.Models.ProjectTracker", "ProjectTracker")
                        .WithOne("Compliance")
                        .HasForeignKey("BlueprintProWeb.Models.Compliance", "projectTrack_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectTracker");
                });

            modelBuilder.Entity("BlueprintProWeb.Models.Match", b =>
                {
                    b.HasOne("BlueprintProWeb.Models.User", "Architect")
                        .WithMany()
                        .HasForeignKey("ArchitectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BlueprintProWeb.Models.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Architect");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("BlueprintProWeb.Models.Message", b =>
                {
                    b.HasOne("BlueprintProWeb.Models.User", "Architect")
                        .WithMany()
                        .HasForeignKey("ArchitectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BlueprintProWeb.Models.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BlueprintProWeb.Models.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Architect");

                    b.Navigation("Client");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("BlueprintProWeb.Models.Notification", b =>
                {
                    b.HasOne("BlueprintProWeb.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("user_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlueprintProWeb.Models.Project", b =>
                {
                    b.HasOne("BlueprintProWeb.Models.Blueprint", "Blueprint")
                        .WithMany()
                        .HasForeignKey("blueprint_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlueprintProWeb.Models.User", "Architect")
                        .WithMany()
                        .HasForeignKey("user_architectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BlueprintProWeb.Models.User", "Client")
                        .WithMany()
                        .HasForeignKey("user_clientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Architect");

                    b.Navigation("Blueprint");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("BlueprintProWeb.Models.ProjectFile", b =>
                {
                    b.HasOne("BlueprintProWeb.Models.ProjectTracker", null)
                        .WithMany("ProjectFiles")
                        .HasForeignKey("ProjectTrackerprojectTrack_Id");

                    b.HasOne("BlueprintProWeb.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("project_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("BlueprintProWeb.Models.ProjectTracker", b =>
                {
                    b.HasOne("BlueprintProWeb.Models.Project", "Project")
                        .WithOne()
                        .HasForeignKey("BlueprintProWeb.Models.ProjectTracker", "project_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BlueprintProWeb.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BlueprintProWeb.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlueprintProWeb.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BlueprintProWeb.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlueprintProWeb.Models.ProjectTracker", b =>
                {
                    b.Navigation("Compliance")
                        .IsRequired();

                    b.Navigation("ProjectFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
