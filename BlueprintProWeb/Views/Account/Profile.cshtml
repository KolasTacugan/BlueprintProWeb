@model BlueprintProWeb.ViewModels.ProfileViewModel
@{
    Layout = ViewData["Layout"]?.ToString();
    ViewData["Title"] = "Profile";
}

@section Styles {
    <style>
            @@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');
        /* Override shared layout background for profile page */
        body::before {
            background: url("/images/BPP_Dashboard_BG.png") center/cover no-repeat !important;
            opacity: 0.1 !important;
        }

        /* Ensure scrollable page */
        body {
            overflow-y: auto !important;
            height: auto !important;
            font-family: 'Poppins', sans-serif;
            margin: 0;
            min-height: 100vh;
        }

        /* Main content positioning that responds to sidebar state - using main.container to match shared layout */
        main.container {
            margin-left: 300px;
            margin-top: 90px;
            padding: 2rem;
            padding-top: 4rem;
            max-width: calc(100% - 320px);
            transition: margin-left 0.4s ease, max-width 0.4s ease;
        }

        /* When sidebar is collapsed, adjust main content */
        .sidebar.collapsed ~ * main.container,
        body:has(.sidebar.collapsed) main.container {
            margin-left: 110px; /* Account for collapsed sidebar (85px + margins) */
            max-width: calc(100% - 130px);
        }

        .profile-main-card {
            background: rgba(255, 255, 255, 0.4);
            backdrop-filter: blur(12px);
            border-radius: 24px;
            padding: 40px;
            margin: 0 20px 40px 20px;
            box-shadow: 0 12px 40px rgba(13, 60, 128, 0.15);
            border: 1px solid rgba(255, 255, 255, 0.3);
            position: relative;
        }

        /* Pro Badge on Profile Card */
        .pro-badge {
            position: absolute;
            top: 20px;
            right: 25px;
            background: linear-gradient(135deg, #0D3C80, #1a5bb8);
            color: white;
            padding: 6px 16px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.8px;
            box-shadow: 0 4px 15px rgba(13, 60, 128, 0.3);
            animation: proBadgeGlow 2s ease-in-out infinite alternate;
        }

        @@keyframes proBadgeGlow {
            0% {
                box-shadow: 0 4px 15px rgba(13, 60, 128, 0.3);
            }
            100% {
                box-shadow: 0 4px 20px rgba(13, 60, 128, 0.5);
            }
        }

        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            position: relative;
        }

            .page-header h2 {
                color: #0D3C80;
                font-weight: 700;
            }

        /* Pro indicator next to name */
        .user-name-container {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .pro-indicator {
            background: linear-gradient(135deg, #0D3C80, #1a5bb8);
            color: white;
            padding: 2px 8px;
            border-radius: 8px;
            font-size: 0.7rem;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .settings-btn {
            background: transparent;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #0D3C80;
        }

        .profile-section {
            display: flex;
            gap: 20px;
            margin-bottom: 30px;
        }

        .profile-card {
            flex: 2;
            background: rgba(255, 255, 255, 0.85);
            border-radius: 16px;
            padding: 20px;
            box-shadow: 0px 4px 12px rgba(13, 60, 128, 0.08);
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: relative;
        }

        /* Pro border for profile card */
        .profile-card.pro-user {
            border: 2px solid #0D3C80;
            background: linear-gradient(135deg, rgba(13, 60, 128, 0.02), rgba(255, 255, 255, 0.9));
        }

        .profile-info {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .avatar-container {
            position: relative;
            width: 64px;
            height: 64px;
        }

        .avatar {
            width: 64px;
            height: 64px;
            border-radius: 50%;
            overflow: hidden;
            border: 2px solid #EBF1FD;
            background: #f8f9fa;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            cursor: pointer;
        }

        /* Pro user avatar styling */
        .avatar.pro-user {
            border: 3px solid #0D3C80;
            box-shadow: 0 0 15px rgba(13, 60, 128, 0.3);
        }

        .avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .avatar-placeholder {
            color: #0D3C80;
            font-size: 24px;
            font-weight: 600;
        }

        .avatar-upload-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(13, 60, 128, 0.8);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            transition: opacity 0.3s ease;
            border-radius: 50%;
            cursor: pointer;
            font-size: 14px;
        }

        .avatar-container:hover .avatar-upload-overlay {
            opacity: 1;
        }

        .file-input {
            display: none;
        }

        .user-details h3 {
            margin: 0;
            color: #0D3C80;
            font-weight: 600;
        }

        .user-details .email,
        .user-details .phone {
            font-size: 0.9rem;
            color: #555;
        }

        .edit-btn {
            background: #0D3C80;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 8px;
            cursor: pointer;
            text-decoration: none;
        }

            .edit-btn:hover {
                background: #0A2F66;
                color: white;
            }

        .side-buttons {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

            .side-buttons .card {
                background: rgba(255, 255, 255, 0.85);
                border-radius: 16px;
                padding: 16px;
                text-align: center;
                cursor: pointer;
                box-shadow: 0px 4px 12px rgba(13, 60, 128, 0.08);
                text-decoration: none;
                color: #0D3C80;
                font-weight: 500;
                transition: all 0.3s ease;
                display: block;
                border: none;
                position: relative;
            }

                .side-buttons .card:hover {
                    background: rgba(13, 60, 128, 0.1);
                    transform: translateY(-2px);
                    box-shadow: 0px 6px 16px rgba(13, 60, 128, 0.15);
                    text-decoration: none;
                    color: #0D3C80;
                }

        /* Pro subscription button styling */
        .subscription-card-pro {
            background: linear-gradient(135deg, rgba(13, 60, 128, 0.05), rgba(255, 255, 255, 0.9)) !important;
            border: 2px solid #0D3C80 !important;
        }

        .subscription-card-pro::after {
            content: "PRO";
            position: absolute;
            top: -1px;
            right: -1px;
            background: linear-gradient(135deg, #0D3C80, #1a5bb8);
            color: white;
            padding: 2px 8px;
            border-radius: 0 14px 0 12px;
            font-size: 0.6rem;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .credentials-card {
            background: rgba(255, 255, 255, 0.85);
            border-radius: 16px;
            padding: 20px;
            box-shadow: 0px 4px 12px rgba(13, 60, 128, 0.08);
        }

            .credentials-card h4 {
                margin-top: 0;
                color: #0D3C80;
                font-weight: 600;
            }

        .alert {
            padding: 12px 16px;
            margin-bottom: 20px;
            border-radius: 8px;
            font-weight: 500;
        }

        .alert-success {
            background-color: #d1edff;
            border: 1px solid #0D3C80;
            color: #0D3C80;
        }

        .alert-danger {
            background-color: #f8d7da;
            border: 1px solid #dc3545;
            color: #721c24;
        }

        /* SUBSCRIPTION MODAL STYLES - Updated to match page design */
        .subscription-modal {
            display: none;
            position: fixed;
            z-index: 9999;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            backdrop-filter: blur(5px);
        }

            .subscription-modal.show {
                display: flex;
                align-items: center;
                justify-content: center;
            }

        .modal-content-large {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(15px);
            border-radius: 24px;
            padding: 0;
            margin: 20px;
            box-shadow: 0 20px 60px rgba(13, 60, 128, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.3);
            max-width: 800px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
            position: relative;
        }

        .modal-header-custom {
            background: linear-gradient(135deg, #0D3C80, #1a5bb8);
            color: white;
            padding: 30px;
            border-radius: 24px 24px 0 0;
            text-align: center;
            position: relative;
        }

        .modal-close {
            position: absolute;
            top: 20px;
            right: 25px;
            background: none;
            border: none;
            color: white;
            font-size: 1.8rem;
            cursor: pointer;
            padding: 0;
            width: 35px;
            height: 35px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.3s ease;
        }

            .modal-close:hover {
                background-color: rgba(255, 255, 255, 0.2);
            }

        .modal-title-custom {
            font-size: 2rem;
            font-weight: 700;
            margin: 0;
            color: white;
        }

        .modal-subtitle {
            color: rgba(255, 255, 255, 0.9);
            font-size: 1.1rem;
            margin-top: 10px;
            font-weight: 400;
        }

        .modal-body-custom {
            padding: 40px;
        }

        /* Plans Container - Side by Side */
        .plans-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 25px;
            max-width: 100%;
        }

        .plan-card {
            background: rgba(255, 255, 255, 0.9);
            border-radius: 20px;
            padding: 35px 30px;
            text-align: left;
            position: relative;
            box-shadow: 0 8px 30px rgba(13, 60, 128, 0.1);
            transition: all 0.3s ease;
            border: 2px solid transparent;
            min-height: 300px;
            display: flex;
            flex-direction: column;
        }

            .plan-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 16px 50px rgba(13, 60, 128, 0.2);
            }

            .plan-card.pro-plan {
                border-color: #0D3C80;
                background: linear-gradient(135deg, rgba(13, 60, 128, 0.05), rgba(255, 255, 255, 0.95));
            }

            .plan-card.current-plan {
                border-color: #28a745;
                background: linear-gradient(135deg, rgba(40, 167, 69, 0.05), rgba(255, 255, 255, 0.95));
            }

        .plan-badge {
            position: absolute;
            top: -1px;
            right: -1px;
            padding: 8px 16px;
            border-radius: 0 20px 0 20px;
            font-size: 0.8rem;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .recommended-badge {
            background: linear-gradient(135deg, #0D3C80, #1a5bb8);
            color: white;
        }

        .current-badge {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
        }

        .plan-header {
            margin-bottom: 25px;
        }

        .plan-name {
            font-size: 1.8rem;
            font-weight: 700;
            color: #0D3C80;
            margin-bottom: 15px;
        }

        .plan-price {
            font-size: 2.8rem;
            font-weight: 800;
            color: #0D3C80;
            margin-bottom: 8px;
            line-height: 1;
        }

        .plan-billing {
            color: #666;
            font-size: 1rem;
            font-weight: 400;
            margin-bottom: 25px;
        }

        .plan-features {
            flex: 1;
            margin-bottom: 25px;
        }

        .features-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }

            .features-list li {
                color: #333;
                font-size: 1rem;
                line-height: 1.6;
                margin-bottom: 8px;
            }

        .plan-button {
            width: 100%;
            padding: 15px 25px;
            border: none;
            border-radius: 12px;
            font-weight: 600;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-top: auto;
        }

            .plan-button.primary {
                background: linear-gradient(135deg, #0D3C80, #1a5bb8);
                color: white;
            }

                .plan-button.primary:hover {
                    background: linear-gradient(135deg, #0A2F66, #164a9e);
                    transform: translateY(-2px);
                    box-shadow: 0 8px 25px rgba(13, 60, 128, 0.3);
                }

            .plan-button.current-btn {
                background: linear-gradient(135deg, #28a745, #20c997);
                color: white;
                cursor: default;
            }

        /* CHECKOUT STYLES */
        .checkout-container {
            display: none;
            max-width: 100%;
        }

            .checkout-container.show {
                display: block;
            }

        .back-button {
            background: none;
            border: none;
            color: white;
            font-size: 1rem;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 10px;
            padding: 5px 0;
            transition: opacity 0.3s ease;
        }

            .back-button:hover {
                opacity: 0.8;
            }

        .checkout-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
        }

        .order-summary {
            background: rgba(255, 255, 255, 0.9);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 8px 30px rgba(13, 60, 128, 0.1);
            border: 2px solid #0D3C80;
        }

        .summary-header {
            font-size: 1.4rem;
            font-weight: 700;
            color: #0D3C80;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid rgba(13, 60, 128, 0.1);
        }

        .summary-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding: 10px 0;
        }

        .summary-item-name {
            font-weight: 600;
            color: #333;
        }

        .summary-item-price {
            font-weight: 700;
            color: #0D3C80;
            font-size: 1.1rem;
        }

        .summary-total {
            border-top: 2px solid rgba(13, 60, 128, 0.1);
            padding-top: 15px;
            margin-top: 15px;
        }

        .total-amount {
            font-size: 1.6rem;
            font-weight: 800;
            color: #0D3C80;
        }

        .payment-form {
            background: rgba(255, 255, 255, 0.9);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 8px 30px rgba(13, 60, 128, 0.1);
        }

        .form-section {
            margin-bottom: 25px;
        }

        .form-section-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: #0D3C80;
            margin-bottom: 15px;
            padding-bottom: 8px;
            border-bottom: 1px solid rgba(13, 60, 128, 0.1);
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 15px;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-label {
            display: block;
            margin-bottom: 6px;
            font-weight: 500;
            color: #0D3C80;
            font-size: 0.9rem;
        }

        .form-input {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.9);
        }

            .form-input:focus {
                outline: none;
                border-color: #0D3C80;
                box-shadow: 0 0 0 3px rgba(13, 60, 128, 0.1);
                background: white;
            }

        .payment-methods {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }

        .payment-method {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 10px 15px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            background: white;
        }

            .payment-method:hover {
                border-color: #0D3C80;
            }

            .payment-method.selected {
                border-color: #0D3C80;
                background: rgba(13, 60, 128, 0.05);
            }

            .payment-method input[type="radio"] {
                margin: 0;
            }

        .checkout-buttons {
            display: flex;
            gap: 15px;
            margin-top: 30px;
        }

        .btn-back {
            flex: 1;
            padding: 15px 25px;
            border: 2px solid #0D3C80;
            border-radius: 12px;
            background: transparent;
            color: #0D3C80;
            font-weight: 600;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .btn-back:hover {
                background: #0D3C80;
                color: white;
            }

        .btn-confirm {
            flex: 2;
            padding: 15px 25px;
            border: none;
            border-radius: 12px;
            background: linear-gradient(135deg, #0D3C80, #1a5bb8);
            color: white;
            font-weight: 700;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

            .btn-confirm:hover {
                background: linear-gradient(135deg, #0A2F66, #164a9e);
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(13, 60, 128, 0.3);
            }

        /* Responsive adjustments */
        @@media (max-width: 767.98px) {
            main.container {
                margin-left: 0 !important;
                margin-top: 75px;
                max-width: 100% !important;
                padding: 1rem;
                padding-top: 2rem;
            }

            .profile-main-card {
                padding: 20px !important;
                margin: 0 10px 20px 10px;
            }

            .pro-badge {
                top: 15px;
                right: 15px;
                padding: 4px 12px;
                font-size: 0.7rem;
            }

            .profile-section {
                flex-direction: column;
                gap: 15px;
            }

            .modal-content-large {
                margin: 10px;
                width: 95%;
            }

            .modal-body-custom {
                padding: 25px;
            }

            .plans-container {
                grid-template-columns: 1fr;
                gap: 20px;
            }

            .plan-card {
                min-height: auto;
            }

            .modal-title-custom {
                font-size: 1.6rem;
            }

            .checkout-content {
                grid-template-columns: 1fr;
                gap: 20px;
            }

            .form-row {
                grid-template-columns: 1fr;
            }

            .checkout-buttons {
                flex-direction: column;
            }
        }
    </style>
}

<div class="profile-main-card">
    @if (Model.IsPro)
    {
        <div class="pro-badge">PRO</div>
    }

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success">@TempData["Success"]</div>
    }
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger">@TempData["Error"]</div>
    }

    <div class="page-header">
        <h2>Profile</h2>
        <button class="settings-btn">⚙</button>
    </div>

    <div class="profile-section">
        <div class="profile-card @(Model.IsPro ? "pro-user" : "")">
            <div class="profile-info">
                <div class="avatar-container">
                    <div class="avatar @(Model.IsPro ? "pro-user" : "")" onclick="document.getElementById('profilePictureInput').click()">
                        @if (!string.IsNullOrEmpty(Model.ProfilePhoto))
                        {
                            <img src="@Url.Content(Model.ProfilePhoto)" alt="@Model.FullName">
                        }
                        else
                        {
                            <div class="avatar-placeholder">
                                @(Model.FirstName?.Substring(0, 1).ToUpper())@(Model.LastName?.Substring(0, 1).ToUpper())
                            </div>
                        }
                    </div>
                    <div class="avatar-upload-overlay" onclick="document.getElementById('profilePictureInput').click()">
                        Upload Photo
                    </div>
                </div>
                <div class="user-details">
                    <div class="user-name-container">
                        <h3 class="name">@Model.FullName</h3>
                        @if (Model.IsPro)
                        {
                            <span class="pro-indicator">PRO</span>
                        }
                    </div>
                    <div class="email">@Model.Email</div>
                    <div class="phone">@Model.PhoneNumber</div>
                </div>
            </div>
            <a asp-controller="Account" asp-action="EditProfile" class="edit-btn">Edit Profile</a>
        </div>

        <div class="side-buttons">
            <div class="card">Favorites</div>
            <button class="card @(Model.IsPro ? "subscription-card-pro" : "")" onclick="openSubscriptionModal()">Subscription</button>
        </div>
    </div>

    <div class="credentials-card">
        <h4>Architect Credentials</h4>

        @if (!string.IsNullOrEmpty(Model.CredentialsFilePath))
        {
            var fullFileName = System.IO.Path.GetFileName(Model.CredentialsFilePath);
            var displayName = fullFileName.Length > 37 ? fullFileName.Substring(37) : fullFileName;

            <p>
                <a href="~/credentials/@fullFileName" target="_blank">@displayName</a>
            </p>
        }
        else
        {
            <p>N/A</p>
        }
    </div>

    <!-- Hidden form for profile picture upload -->
    <form asp-action="UploadProfilePicture" method="post" enctype="multipart/form-data" style="display: none;">
        <input type="file" id="profilePictureInput" name="ProfilePicture" accept="image/*" onchange="uploadProfilePicture(this)" class="file-input" />
    </form>
</div>

<!-- SUBSCRIPTION MODAL -->
<div id="subscriptionModal" class="subscription-modal">
    <div class="modal-content-large">
        <div class="modal-header-custom">
            <button class="modal-close" onclick="closeSubscriptionModal()">&times;</button>
            <h2 class="modal-title-custom" id="modalTitle">Choose Your Plan</h2>
            <p class="modal-subtitle" id="modalSubtitle">Select the subscription that fits your needs</p>
        </div>

        <div class="modal-body-custom">
            <div id="plansView" class="plans-container">

                <!-- Free Plan -->
                <div class="plan-card @(Model.IsPro ? "" : "current-plan")">
                    @if (!Model.IsPro)
                    {
                        <div class="plan-badge current-badge">Current</div>
                    }
                    <div class="plan-header">
                        <div class="plan-name">Free</div>
                        <div class="plan-price">₱0</div>
                        <div class="plan-billing">per month, no credit card required</div>
                    </div>

                    <div class="plan-features">
                        <ul class="features-list">
                            <li>Standard AI matching</li>
                        </ul>
                    </div>

                    @if (!Model.IsPro)
                    {
                        <button class="plan-button current-btn">Current Plan</button>
                    }
                    else
                    {
                        <button class="plan-button" style="background: #dc3545; color: white; cursor: pointer;" onclick="confirmDowngrade()">Downgrade</button>
                    }
                </div>

                <!-- Pro Plan -->
                <div class="plan-card @(Model.IsPro ? "current-plan" : "pro-plan")">
                    @if (Model.IsPro)
                    {
                        <div class="plan-badge current-badge">Current</div>
                    }
                    else
                    {
                        <div class="plan-badge recommended-badge">Recommended</div>
                    }
                    <div class="plan-header">
                        <div class="plan-name">Pro</div>
                        <div class="plan-price">₱180</div>
                        <div class="plan-billing">per month, billed monthly</div>
                    </div>

                    <div class="plan-features">
                        <ul class="features-list">
                            <li>Priority AI matching — appear at the top of client searches and gain more visibility in project recommendations</li>
                            <li>Access to premium analytics and insights</li>
                            <li>Cancel anytime</li>
                        </ul>
                    </div>

                    @if (Model.IsPro)
                    {
                        <button class="plan-button current-btn">Current Plan</button>
                    }
                    else
                    {
                        <!-- Updated button: Directly redirects to Stripe -->
                        <button class="plan-button primary" onclick="upgradeToPro()">Get Started</button>
                    }
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        // SIDEBAR ADJUSTMENT
        document.addEventListener('DOMContentLoaded', function () {
            const sidebar = document.querySelector('.sidebar');
            const sidebarToggler = document.querySelector('.sidebar-toggler');
            const mainContent = document.querySelector('main.container');

            function adjustMainContent() {
                if (sidebar && mainContent) {
                    if (sidebar.classList.contains('collapsed')) {
                        mainContent.style.marginLeft = '110px';
                        mainContent.style.maxWidth = 'calc(100% - 130px)';
                    } else {
                        mainContent.style.marginLeft = '300px';
                        mainContent.style.maxWidth = 'calc(100% - 320px)';
                    }
                }
            }

            adjustMainContent();

            if (sidebarToggler) {
                sidebarToggler.addEventListener('click', function () {
                    setTimeout(adjustMainContent, 50);
                });
            }
        });

        // PROFILE PICTURE UPLOAD
        function uploadProfilePicture(input) {
            const file = input.files[0];
            if (!file) return;

            if (file.size > 5 * 1024 * 1024) {
                alert('File size must be less than 5MB');
                input.value = '';
                return;
            }

            const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'];
            if (!allowedTypes.includes(file.type)) {
                alert('Please select a valid image file (JPG, PNG, or GIF)');
                input.value = '';
                return;
            }

            const avatarContainer = document.querySelector('.avatar-container');
            const overlay = avatarContainer.querySelector('.avatar-upload-overlay');
            overlay.innerHTML = 'Uploading...';
            overlay.style.opacity = '1';

            input.form.submit();
        }

        // SUBSCRIPTION FLOW
        function openSubscriptionModal() {
            const modal = document.getElementById('subscriptionModal');
            modal.classList.add('show');
            document.body.style.overflow = 'hidden';
            showPlansView();
        }

        function closeSubscriptionModal() {
            const modal = document.getElementById('subscriptionModal');
            modal.classList.remove('show');
            document.body.style.overflow = 'auto';
            showPlansView();
        }

        function showPlansView() {
            document.getElementById('plansView').style.display = 'grid';
            document.getElementById('backButton').style.display = 'none';
            document.getElementById('modalTitle').textContent = 'Choose Your Plan';
            document.getElementById('modalSubtitle').textContent = 'Select the subscription that fits your needs';
        }

        // UPGRADE TO PRO USING STRIPE CHECKOUT
        async function upgradeToPro() {
            try {
                // Show loading indicator
                const upgradeBtn = event.target;
                const originalText = upgradeBtn.textContent;
                upgradeBtn.textContent = 'Redirecting to Checkout...';
                upgradeBtn.disabled = true;

                // Get anti-forgery token
                const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

                // Call backend endpoint to create Stripe Checkout session
                const response = await fetch('/ArchitectInterface/CreateCheckoutSession', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': token || ''
                    },
                    body: `__RequestVerificationToken=${encodeURIComponent(token || '')}`
                });

                const data = await response.json();

                if (data && data.url) {
                    window.location.href = data.url; // Redirect to Stripe Checkout
                } else {
                    alert('Failed to start checkout: ' + (data.message || 'Unknown error.'));
                }
            } catch (error) {
                console.error('Error starting checkout:', error);
                alert('An error occurred while redirecting to Stripe Checkout.');
            } finally {
                const upgradeBtn = event.target;
                upgradeBtn.textContent = 'Upgrade to Pro';
                upgradeBtn.disabled = false;
            }
        }

        // DOWNGRADE FUNCTION
        async function confirmDowngrade() {
           if (!confirm("Are you sure you want to downgrade to the Free plan?")) return;

           const downgradeButton = document.querySelector('.plan-button[onclick="confirmDowngrade()"]');
           const originalText = downgradeButton.textContent;
           downgradeButton.textContent = "Processing...";
           downgradeButton.disabled = true;

           try {
               const response = await fetch('/Account/DowngradeToFreePlan', {
                   method: 'POST',
                   headers: {
                       'Content-Type': 'application/json',
                       'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                   },
               });

               const text = await response.text();
               let data;
               try {
                   data = JSON.parse(text);
               } catch {
                   throw new Error('Non-JSON response received.');
               }

               if (data.success) {
                   alert('✅ Successfully downgraded to Free Plan!');

                   // 🔥 Update UI instantly (no need to reload)
                   document.querySelectorAll('.pro-indicator').forEach(el => el.remove());
                   document.querySelectorAll('.pro-user').forEach(el => el.classList.remove('pro-user'));
                   document.querySelectorAll('.subscription-card-pro').forEach(el => el.classList.remove('subscription-card-pro'));

                   // Update plan badges visually
                   const freeCard = document.querySelector('.plan-card:nth-child(1)');
                   const proCard = document.querySelector('.plan-card:nth-child(2)');
                   freeCard.classList.add('current-plan');
                   proCard.classList.remove('current-plan');
                   proCard.classList.add('pro-plan');

                   // Replace buttons
                   downgradeButton.outerHTML = `<button class="plan-button current-btn">Current Plan</button>`;
                   proCard.querySelector('.plan-button').outerHTML = `<button class="plan-button primary" onclick="upgradeToPro()">Get Started</button>`;

                   closeSubscriptionModal();
               } else {
                   alert('❌ Downgrade failed: ' + (data.message || 'Unknown error.'));
               }
           } catch (error) {
               console.error('Error during downgrade:', error);
               
           } finally {
               downgradeButton.textContent = originalText;
               downgradeButton.disabled = false;
           }
        }

        // CLOSE MODAL EVENTS
        document.addEventListener('click', function (e) {
            const modal = document.getElementById('subscriptionModal');
            if (e.target === modal) {
                closeSubscriptionModal();
            }
        });

        document.addEventListener('keydown', function (e) {
            if (e.key === 'Escape') {
                closeSubscriptionModal();
            }
        });
    </script>
}
