@model IEnumerable<BlueprintProWeb.Models.Blueprint>
@{
    ViewData["Title"] = "Blueprint Marketplace";
    Layout = "~/Views/Shared/_ClientSharedLayout.cshtml";
}

<style>
    .cart-modal {
        display: none;
        position: fixed;
        z-index: 1050;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(3px);
    }

    .cart-modal-content {
        position: absolute;
        right: 20px;
        top: 80px;
        background: #fff;
        border-radius: 14px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        width: 550px;
        max-height: 80vh;
        overflow: hidden;
        animation: slideInRight 0.3s ease-out;
    }

    @@keyframes slideInRight {
        from {
            transform: translateX(100%);
            opacity: 0;
        }

        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    .cart-modal-header {
        padding: 20px 24px 16px;
        border-bottom: 1px solid #DEE2E6;
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: linear-gradient(135deg, #f8f9fa 0%, #fff 100%);
    }

    .cart-modal-title {
        font-size: 1.5rem;
        font-weight: 700;
        color: #091635;
        margin: 0;
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .cart-close-btn {
        background: none;
        border: none;
        font-size: 1.5rem;
        color: #091635;
        cursor: pointer;
        padding: 4px;
        border-radius: 4px;
        transition: background-color 0.2s ease;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .cart-close-btn:hover {
            background-color: #f8f9fa;
        }

    .cart-tabs {
        display: flex;
        border-bottom: 1px solid #DEE2E6;
        background: #fff;
    }

    .cart-tab {
        flex: 1;
        padding: 12px 16px;
        background: none;
        border: none;
        border-bottom: 2px solid transparent;
        font-weight: 600;
        color: #6c757d;
        cursor: pointer;
        transition: all 0.2s ease;
        font-size: 0.9rem;
    }

        .cart-tab.active {
            color: #0D3C80;
            border-bottom-color: #0D3C80;
            background: #f8f9fb;
        }

        .cart-tab:hover {
            color: #0D3C80;
            background: #f8f9fb;
        }

    .cart-modal-body {
        padding: 20px 24px;
        max-height: 350px;
        overflow-y: auto;
        background: #fff;
    }

    .cart-empty {
        text-align: center;
        padding: 40px 20px;
        color: #6c757d;
    }

    .cart-empty-icon {
        font-size: 3rem;
        color: #DEE2E6;
        margin-bottom: 16px;
    }

    .cart-modal-footer {
        padding: 16px 24px 20px;
        border-top: 1px solid #DEE2E6;
        background: #f8f9fa;
        border-radius: 0 0 14px 14px;
    }

    .cart-total {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 16px;
        font-weight: 700;
        color: #091635;
        font-size: 1.1rem;
    }

    .cart-total-amount {
        color: #0D3C80;
        font-size: 1.2rem;
    }

    .cart-checkout-btn {
        width: 100%;
        padding: 12px;
        background: #0D3C80;
        color: #fff;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.2s ease;
        font-size: 1rem;
    }

        .cart-checkout-btn:hover:not(:disabled) {
            background: #071744;
        }

        .cart-checkout-btn:disabled {
            background: #DEE2E6;
            color: #6c757d;
            cursor: not-allowed;
        }

    .tab-content {
        display: none;
    }

        .tab-content.active {
            display: block;
        }

    /* Prevent dragging/selection of protected images (from his code) */
    .protected-img {
        -webkit-user-drag: none;
        user-drag: none;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        cursor: default;
    }

    @@media (max-width: 768px) {
        .cart-modal-content {
            right: 10px;
            left: 10px;
            top: 70px;
            width: auto;
        }
    }
</style>

<div>
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="fw-bold mt-5 pt-4">Blueprint Marketplace</h2>
        <button id="cartBtn" class="btn btn-light border mt-5">
            <i class="fas fa-shopping-cart me-2"></i>Cart
            <span id="cartCount" class="badge bg-primary ms-1">0</span>
        </button>
    </div>

    <ul class="nav nav-tabs mb-4">
        <li class="nav-item"><a class="nav-link active" href="#">Residential</a></li>
        <li class="nav-item"><a class="nav-link" href="#">Commercial</a></li>
        <li class="nav-item"><a class="nav-link" href="#">Industrial</a></li>
        <li class="nav-item"><a class="nav-link" href="#">Interior</a></li>
    </ul>

    <div class="row">
        @foreach (var item in Model)
        {
            <div class="col-md-3 mb-4">
                <div class="card shadow-sm">
                    <img src="~/images/@item.blueprintImage"
                         class="card-img-top protected-img"
                         alt="@item.blueprintName"
                         asp-append-version="true" />

                    <div class="card-body">
                        <h5 class="fw-bold">₱@item.blueprintPrice</h5>
                        <p class="mb-1">@item.blueprintName</p>
                        <small class="text-muted">@item.blueprintDescription</small>

                        <div class="d-flex align-items-center my-2">
                            <span class="text-warning">★★★★★</span>
                            <small class="ms-2">(0)</small>
                        </div>

                        <button class="btn btn-primary w-100 add-to-cart"
                                data-id="@item.blueprintId"
                                data-name="@item.blueprintName"
                                data-price="@item.blueprintPrice"
                                data-image="@item.blueprintImage">
                            Add to Cart
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Cart Modal -->
<div id="cartModal" class="cart-modal">
    <div class="cart-modal-content">
        <div class="cart-modal-header">
            <h3 class="cart-modal-title">
                <i class="fas fa-shopping-cart"></i>
                Shopping Cart
            </h3>
            <button class="cart-close-btn" id="cartCloseBtn">&times;</button>
        </div>

        <div class="cart-tabs">
            <button class="cart-tab active" data-tab="cart">
                Cart (<span id="cartTabCount">0</span>)
            </button>
            <button class="cart-tab" data-tab="saved">
                Saved (<span id="savedTabCount">0</span>)
            </button>
        </div>

        <div class="cart-modal-body">
            <div id="cartTab" class="tab-content active">
                <div id="cartItems"></div>
                <div id="cartEmpty" class="cart-empty">
                    <div class="cart-empty-icon">🛒</div>
                    <p><strong>Your cart is empty</strong></p>
                    <small class="text-muted">Add some blueprints to get started!</small>
                </div>
            </div>

            <div id="savedTab" class="tab-content">
                <div id="savedItems"></div>
                <div id="savedEmpty" class="cart-empty">
                    <div class="cart-empty-icon">💾</div>
                    <p><strong>No saved items</strong></p>
                    <small class="text-muted">Save blueprints for later!</small>
                </div>
            </div>
        </div>

        <div class="cart-modal-footer">
            <div class="cart-total">
                <span>Total:</span>
                <span class="cart-total-amount">₱<span id="cartTotal">0.00</span></span>
            </div>
            <button id="checkoutBtn" class="cart-checkout-btn" disabled>
                <i class="fas fa-credit-card me-2"></i>
                Proceed to Checkout
            </button>
        </div>
    </div>
</div>

<!-- Checkout & Payment Modal -->
<div id="checkoutModal" class="cart-modal">
    <div class="cart-modal-content">
        <div class="cart-modal-header">
            <h3 class="cart-modal-title">
                <i class="fas fa-credit-card"></i>
                Checkout & Payment
            </h3>
            <button class="cart-close-btn" id="checkoutCloseBtn">&times;</button>
        </div>

        <div class="cart-modal-body">
            <div id="checkoutItems"></div>
        </div>

        <div class="cart-modal-footer">
            <div class="cart-total">
                <span>Total:</span>
                <span class="cart-total-amount">₱<span id="checkoutTotal">0.00</span></span>
            </div>
            <button id="payWithStripeBtn" class="cart-checkout-btn">
                <i class="fas fa-wallet me-2"></i>
                Pay with Stripe
            </button>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://js.stripe.com/v3/"></script>
    <script>
        let cart = [];
        let savedItems = [];
        let stripe = Stripe("@ViewBag.StripePublishableKey");

        const cartModal = document.getElementById('cartModal');
        const cartBtn = document.getElementById('cartBtn');
        const cartCloseBtn = document.getElementById('cartCloseBtn');
        const cartCount = document.getElementById('cartCount');
        const cartTabCount = document.getElementById('cartTabCount');
        const savedTabCount = document.getElementById('savedTabCount');
        const cartTotal = document.getElementById('cartTotal');
        const checkoutBtn = document.getElementById('checkoutBtn');
        const cartItems = document.getElementById('cartItems');
        const cartEmpty = document.getElementById('cartEmpty');

        const checkoutModal = document.getElementById('checkoutModal');
        const checkoutCloseBtn = document.getElementById('checkoutCloseBtn');
        const checkoutItems = document.getElementById('checkoutItems');
        const checkoutTotal = document.getElementById('checkoutTotal');
        const payWithStripeBtn = document.getElementById('payWithStripeBtn');

        // ------------------ Load Cart ------------------
        async function loadCart() {
            const res = await fetch('/ClientInterface/GetCart');
            if (!res.ok) return;
            const data = await res.json();
            cart = data.items || [];
            updateCartDisplay();
        }

        // ------------------ Add to Cart ------------------
        async function addToCart(id, name, price, image) {
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            const res = await fetch('/ClientInterface/AddToCart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ blueprintId: id, quantity: 1 })
            });

            const result = await res.json();
            if (result.success) await loadCart();
        }

        // ------------------ Update Cart UI ------------------
        function updateCartDisplay() {
            cartCount.textContent = cart.length;
            cartTabCount.textContent = cart.length;

            let total = 0;
            cartItems.innerHTML = "";

            cart.forEach(item => {
                total += item.price * item.quantity;
                cartItems.innerHTML += `
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <div>
                            <strong>${item.name}</strong><br>
                            ₱${item.price} x ${item.quantity}
                        </div>
                        <img src="/images/${item.image}" width="60" class="rounded" />
                    </div>`;
            });

            cartTotal.textContent = total.toFixed(2);
            checkoutBtn.disabled = cart.length === 0;
            cartEmpty.style.display = cart.length === 0 ? 'block' : 'none';
        }

        // ------------------ Checkout Modal ------------------
        checkoutBtn.addEventListener('click', () => {
            checkoutItems.innerHTML = "";
            let total = 0;
            cart.forEach(item => {
                total += item.price * item.quantity;
                checkoutItems.innerHTML += `<p>${item.name} - ₱${item.price} x ${item.quantity}</p>`;
            });
            checkoutTotal.textContent = total.toFixed(2);
            cartModal.style.display = 'none';
            checkoutModal.style.display = 'block';
        });

       
                // ------------------ Stripe Checkout ------------------
                payWithStripeBtn.addEventListener('click', async () => {
            try {
                // 1. Create Stripe session
                const res = await fetch('/ClientInterface/CreateCheckoutSession', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(cart)
                });

                const { id } = await res.json();
                const { error } = await stripe.redirectToCheckout({ sessionId: id });

                if (error) return alert(error.message);

                // 2. Simulate success for frontend test (replace with webhook for real)
                alert("Payment successful! 🎉");

                // 3. Call backend to update blueprints & clear cart
                const blueprintIds = cart.map(item => item.blueprintId);
                await fetch('/ClientInterface/CompletePurchase', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(blueprintIds)
                });

                // 4. Clear cart on frontend
                cart = [];
                updateCartDisplay();
                checkoutModal.style.display = 'none';
            } catch (err) {
                console.error(err);
                alert("Something went wrong with your payment.");
            }
        });
                // ------------------ After returning from Stripe Checkout ------------------
        document.addEventListener('DOMContentLoaded', async () => {
            const urlParams = new URLSearchParams(window.location.search);
            const sessionId = urlParams.get('session_id');

            if (sessionId) {
                alert("Payment successful! 🎉");

                // Call backend to mark blueprints as sold and clear cart
                const blueprintIds = cart.map(item => item.blueprintId);
                await fetch('/ClientInterface/CompletePurchase', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(blueprintIds)
                });

                cart = [];
                updateCartDisplay();

                // Remove session_id from URL so alert doesn't appear again on refresh
                window.history.replaceState({}, document.title, '/ClientInterface/BlueprintMarketplace');
            }
        });



        // ------------------ Open / Close Modals ------------------
        cartBtn.onclick = () => cartModal.style.display = 'block';
        cartCloseBtn.onclick = () => cartModal.style.display = 'none';
        checkoutCloseBtn.onclick = () => checkoutModal.style.display = 'none';
        window.onclick = (e) => {
            if (e.target === cartModal) cartModal.style.display = 'none';
            if (e.target === checkoutModal) checkoutModal.style.display = 'none';
        }

        // ------------------ Init ------------------
        document.querySelectorAll('.add-to-cart').forEach(btn => {
            btn.addEventListener('click', () =>
                addToCart(btn.dataset.id, btn.dataset.name, btn.dataset.price, btn.dataset.image));
        });

        loadCart();
    </script>
}

