@model BlueprintProWeb.ViewModels.ChatPageViewModel

@{
    ViewData["Title"] = "Messages";
    Layout = "~/Views/Shared/_ClientSharedLayout.cshtml";
}

<div class="container-fluid mt-3">
    <div class="row">
        <!-- LEFT PANEL -->
        <div class="col-md-4 border-end bg-white" style="height: 90vh; overflow-y: auto;">
            <h5 class="mb-3">Matches</h5>
            <div class="d-flex flex-wrap gap-3 mb-4">
                @if (Model.Matches.Any())
                {
                    foreach (var match in Model.Matches)
                    {
                        <a asp-controller="ClientInterface" asp-action="Messages"
                           asp-route-architectId="@match.ArchitectId"
                           class="text-center text-decoration-none">
                            <div class="rounded-circle bg-secondary d-flex justify-content-center align-items-center"
                                 style="width:60px; height:60px; color:white; font-weight:bold;">
                                @match.ArchitectName.Substring(0, 1)
                            </div>
                            <div class="small text-dark">@match.ArchitectName</div>
                        </a>
                    }
                }
                else
                {
                    <p class="text-muted">No matches yet</p>
                }
            </div>

            <h6 class="mt-4">Conversations</h6>
            <ul class="list-group">
                @if (Model.Conversations.Any())
                {
                    foreach (var convo in Model.Conversations.OrderByDescending(c => c.LastMessageTime))
                    {
                        <a asp-controller="ClientInterface" asp-action="Messages"
                           asp-route-architectId="@convo.ClientId"
                           class="list-group-item list-group-item-action d-flex justify-content-between align-items-center
                                          @(Model.ActiveChat != null && Model.ActiveChat.ClientId == convo.ClientId ? "active" : "")">

                            <!-- Left side: Architect/Client name -->
                            <span>@convo.ClientName</span>

                            <!-- Right side: Time + New message badge -->
                            <div class="d-flex align-items-center gap-2">
                                <small class="text-muted">@convo.LastMessageTime.ToShortTimeString()</small>

                                @if (convo.UnreadCount > 0)
                                {
                                    <span class="badge bg-danger rounded-pill">
                                        @convo.UnreadCount
                                    </span>
                                }
                            </div>
                        </a>
                    }
                }
                else
                {
                    <li class="list-group-item text-muted">No conversations yet</li>
                }
            </ul>
        </div>

        <!-- RIGHT PANEL -->
        <div class="col-md-8 d-flex flex-column bg-light" style="height: 90vh;">
            @if (Model.ActiveChat != null)
            {
                <!-- Chat Header -->
                <div class="border-bottom p-2 d-flex align-items-center bg-white">
                    <strong>@Model.ActiveChat.ClientName</strong>
                </div>

                <!-- Chat History -->
                <div class="flex-grow-1 overflow-auto p-3">
                    @foreach (var msg in Model.ActiveChat.Messages)
                    {
                        <div class="mb-2 @(msg.IsOwnMessage ? "text-end" : "text-start")">
                            <div class="d-inline-block p-2 rounded"
                                 style="background:@(msg.IsOwnMessage ? "#198754" : "#f1f1f1");
                                                color:@(msg.IsOwnMessage ? "white" : "black");
                                                max-width:70%; word-wrap:break-word;">
                                @msg.MessageBody
                            </div>
                            <div class="small text-muted">
                                @msg.MessageDate.ToShortTimeString()
                            </div>
                        </div>
                    }
                </div>

                <!-- Chat Input -->
                <form asp-controller="ClientInterface" asp-action="SendMessage" method="post"
                      class="d-flex border-top p-2 bg-white">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="architectId" value="@Model.ActiveChat.ClientId" />
                    <input type="text" name="messageBody" class="form-control me-2" placeholder="Type a message..." />
                    <button type="submit" class="btn btn-success">
                        <span class="material-symbols-rounded">send</span>
                    </button>
                </form>
            }
            else
            {
                <div class="d-flex justify-content-center align-items-center flex-grow-1">
                    <p class="text-muted">Select a conversation to start chatting</p>
                </div>
            }
        </div>
    </div>
</div>
